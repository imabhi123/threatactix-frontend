import React, { useState, useEffect } from 'react';
import { Bug, AlertTriangle, Globe, TrendingUp, Calendar, ChevronDown, ChevronUp } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import axios from 'axios';

const MalwareCard = ({ title, value, icon: Icon, color }) => (
  <div className={`bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md ${color}`}>
    <div className="flex items-center justify-between">
      <div>
        <p className="text-gray-500 dark:text-gray-300 text-sm">{title}</p>
        <p className="text-2xl font-semibold mt-1 text-gray-900 dark:text-gray-100">{value}</p>
      </div>
      <Icon className="w-8 h-8 opacity-80" />
    </div>
  </div>
);

const MalwareGroup = ({ name, type, victims, firstSeen, expanded, toggleExpand }) => (
  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md mb-4">
    <div
      className="p-4 flex justify-between items-center cursor-pointer"
      onClick={toggleExpand}
    >
      <div className="flex items-center space-x-4">
        <Bug className="w-6 h-6 text-red-500" />
        <div>
          <h3 className="font-semibold text-gray-900 dark:text-gray-100">{name}</h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">{type}</p>
        </div>
      </div>
      {expanded ? <ChevronUp /> : <ChevronDown />}
    </div>
    {expanded && (
      <div className="p-4 pl-14 border-t border-gray-200 dark:border-gray-700">
        <p className="text-gray-900 dark:text-gray-100"><span className="font-semibold">Victims:</span> {victims}</p>
        <p className="text-gray-900 dark:text-gray-100"><span className="font-semibold">First Seen:</span> {firstSeen}</p>
      </div>
    )}
  </div>
);

const MalwarePage = () => {
  const [expandedGroup, setExpandedGroup] = useState(null);
  const [incidentData, setIncidentData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [countries,setCountries]=useState([]);
  const [malwareDistribution,setMalwareDistribution]=useState([]);
  const [activeThreatsCount,setActiveThreatsCount]=useState(0);
  let totalMalware = 0;

  const countAttacksByCategory = (incidentData) => {
    const categoryCount = {};
  
    // Iterate through the incident data and count the occurrences of each category
    incidentData.forEach((incident) => {
      const category = incident.category; // Access the category field from each incident
      if (categoryCount[category]) {
        categoryCount[category] += incident?.victims?.length; // Increment the count if the category already exists
      } else {
        categoryCount[category] = 1; // Initialize the count if the category is new
      }
    });
  
    // Convert the categoryCount object into an array of { name, value } objects
    const newArray= Object.keys(categoryCount).map((category) => ({
      name: category,
      count: categoryCount[category],
    }));
    console.log(newArray);
    return newArray
  };

  const activeThreats = (incidentData) => {
   let ans=0;
   for(let i=0;i<incidentData?.length;i++){
    if(incidentData[i].status)ans++;
   }
   console.log(ans)
   setActiveThreatsCount(ans);
  };

  const formatDate = (date) => {
    const d = new Date(date);
    return d.toISOString().split('T')[0]; // Extracts the yyyy-mm-dd part
  };

  useEffect(() => {
    // Fetch incident data from API
    
    const fetchIncidentData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/v1/incident/incidents');

        setMalwareDistribution(countAttacksByCategory(response.data?.data))
        activeThreats(response.data?.data);
        console.log(response?.data?.data)
        setIncidentData(response.data?.data); // assuming the API response returns an array of incidents

        const countriesResponse = await fetch('http://localhost:5000/api/v1/incident/incidents/getMostAffectedCountries', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            "startDate": "2023-01-01",
            "endDate": formatDate(Date.now()) // Converts Date.now() to yyyy-mm-dd format
          })
        });
        const countriesData = await countriesResponse.json();
        setCountries(countriesData)
        console.log(countriesData,'--> contries')
        console.log()
        setLoading(false);
      } catch (error) {
        console.error("Error fetching incident data:", error);
        setLoading(false);
      }
    };

    fetchIncidentData();
  }, []);

  // Calculate total malware based on incident data
  totalMalware = incidentData.reduce((total, incident) => total + (incident?.victims?.length || 0), 0);

  const toggleExpand = (index) => {
    setExpandedGroup(expandedGroup === index ? null : index);
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  const data = [
    { name: 'Ransomware', count: 120 },
    { name: 'Trojan', count: 80 },
    { name: 'Worm', count: 40 },
    { name: 'Spyware', count: 30 },
    { name: 'Adware', count: 20 },
  ];

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 py-8">
      <h1 className="text-3xl font-bold mb-8 text-gray-900 dark:text-gray-100">Malware Analysis</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <MalwareCard icon={Bug} title="Total Malware Detected" value={totalMalware} color="text-red-600" />
        <MalwareCard icon={AlertTriangle} title="Active Threats" value={activeThreatsCount} color="text-yellow-600" />
        <MalwareCard icon={Globe} title="Affected Countries" value={countries.length} color="text-blue-600" />
        <MalwareCard icon={TrendingUp} title="Trend" value="+12%" color="text-green-600" />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">Malware Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={malwareDistribution}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="count" fill="#3b82f6" />
            </BarChart>
          </ResponsiveContainer>
        </div>
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">Recent Malware Activities</h2>
          <ul className="space-y-2">
            {incidentData.map((incident, index) => (
              <li key={index} className="flex items-center space-x-2 text-gray-900 dark:text-gray-100">
                <Calendar className="w-5 h-5 text-blue-500" />
                <a href={incident.url} target="_blank" rel="noopener noreferrer">{incident.title}</a>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">Active Malware Groups</h2>
        {incidentData.map((incident, index) => (
          <MalwareGroup 
            key={index}
            name={incident.threatActor.name}
            type={incident.category}
            victims={incident.victims.map(v => v.organization).join(', ')}
            firstSeen={new Date(incident.publicationDate).toLocaleDateString()}
            expanded={expandedGroup === index}
            toggleExpand={() => toggleExpand(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default MalwarePage;
